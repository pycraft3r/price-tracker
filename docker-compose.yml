version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: price_tracker_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: price_tracker
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: price_tracker_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispassword}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend
    container_name: price_tracker_backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:${DB_PASSWORD:-password}@postgres:5432/price_tracker
      REDIS_URL: redis://:${REDIS_PASSWORD:-redispassword}@redis:6379
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:80}
      ENV: production
      LOG_LEVEL: INFO
      # Proxy settings
      RESIDENTIAL_PROXY_API_KEY: ${RESIDENTIAL_PROXY_API_KEY}
      ROTATING_PROXY_ENDPOINTS: ${ROTATING_PROXY_ENDPOINTS}
      # Email settings
      SMTP_SERVER: ${SMTP_SERVER:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      FROM_EMAIL: ${FROM_EMAIL:-noreply@pricetracker.com}
      # Frontend URL for emails
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost}
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 5 &&
        python scripts/setup_db.py &&
        uvicorn main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend
    container_name: price_tracker_frontend
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      REACT_APP_API_URL: http://backend:8000/api/v1
      REACT_APP_WS_URL: ws://backend:8000
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro

  # Selenium Grid Hub (for scraping)
  selenium-hub:
    image: selenium/hub:4.11.0
    container_name: selenium-hub
    restart: unless-stopped
    ports:
      - "4444:4444"
    environment:
      GRID_MAX_SESSION: 20
      GRID_BROWSER_TIMEOUT: 300
      GRID_TIMEOUT: 300

  # Chrome nodes for Selenium
  chrome:
    image: selenium/node-chrome:4.11.0
    container_name: selenium-chrome
    restart: unless-stopped
    depends_on:
      - selenium-hub
    environment:
      SE_EVENT_BUS_HOST: selenium-hub
      SE_EVENT_BUS_PUBLISH_PORT: 4442
      SE_EVENT_BUS_SUBSCRIBE_PORT: 4443
      NODE_MAX_INSTANCES: 5
      NODE_MAX_SESSION: 5
    volumes:
      - /dev/shm:/dev/shm
    deploy:
      replicas: 2

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: price_tracker_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: price_tracker_grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_SERVER_ROOT_URL: http://localhost:3001
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: price_tracker_network